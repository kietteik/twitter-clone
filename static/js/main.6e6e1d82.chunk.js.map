{"version":3,"sources":["SidebarOption.js","Sidebar.js","firebase.js","Tweetbox.js","Post.js","Feed.js","Widgets.js","App.js","serviceWorker.js","index.js"],"names":["SidebarOption","active","text","Icon","className","Sidebar","HomeOutlinedIcon","ExploreOutlinedIcon","NotificationsNoneIcon","MailOutlineIcon","BookmarkBorderIcon","ListAltIcon","PersonOutlineIcon","MoreHorizIcon","Button","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","Tweetbox","useState","TweetMessage","setTweetMessage","TweetImage","setTweetImage","action","Avatar","src","onChange","e","target","value","placeholder","onClick","preventDefault","collection","add","displayName","username","verified","image","avatar","type","Post","alt","srcset","Feed","Posts","setPosts","useEffect","onSnapshot","snapshot","docs","map","doc","data","post","Widgets","tweetId","sourceType","screenName","options","height","url","via","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6e6e1d82.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./SidebarOption.css\";\n\nfunction SidebarOption({ active, text, Icon }) {\n    return (\n        <div className={`sidebarOption ${active && \"sidebarOption--active\"}`}>\n            <Icon className=\"icon\" />\n            <h2>{text}</h2>\n        </div>\n    );\n}\n\nexport default SidebarOption;\n","import React from \"react\";\nimport \"./Sidebar.css\";\nimport SidebarOption from \"./SidebarOption\";\n\nimport TwitterIcon from \"@material-ui/icons/Twitter\";\nimport HomeOutlinedIcon from \"@material-ui/icons/HomeOutlined\";\nimport ExploreOutlinedIcon from \"@material-ui/icons/ExploreOutlined\";\nimport NotificationsNoneIcon from \"@material-ui/icons/NotificationsNone\";\nimport MailOutlineIcon from \"@material-ui/icons/MailOutline\";\nimport BookmarkBorderIcon from \"@material-ui/icons/BookmarkBorder\";\nimport ListAltIcon from \"@material-ui/icons/ListAlt\";\nimport PersonOutlineIcon from \"@material-ui/icons/PersonOutline\";\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\nimport { Button } from \"@material-ui/core\";\n\nexport default function Sidebar() {\n    return (\n        <div className=\"sidebar\">\n            {/* Icon */}\n            <TwitterIcon />\n\n            {/* options */}\n            <SidebarOption active Icon={HomeOutlinedIcon} text=\"Home\" />\n            <SidebarOption Icon={ExploreOutlinedIcon} text=\"Explore\" />\n            <SidebarOption Icon={NotificationsNoneIcon} text=\"Notifications\" />\n            <SidebarOption Icon={MailOutlineIcon} text=\"Messages\" />\n            <SidebarOption Icon={BookmarkBorderIcon} text=\"Bookmark\" />\n            <SidebarOption Icon={ListAltIcon} text=\"Lists\" />\n            <SidebarOption Icon={PersonOutlineIcon} text=\"Profile\" />\n            <SidebarOption Icon={MoreHorizIcon} text=\"More\" />\n\n            {/* tweet button */}\n            <Button className=\"sidebar__tweet\">Tweet</Button>\n        </div>\n    );\n}\n","import firebase from \"firebase\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBHWA2K-kwgV1P0BEleUtV0usx444DSi2k\",\n    authDomain: \"twitter-clone-106d4.firebaseapp.com\",\n    databaseURL: \"https://twitter-clone-106d4.firebaseio.com\",\n    projectId: \"twitter-clone-106d4\",\n    storageBucket: \"twitter-clone-106d4.appspot.com\",\n    messagingSenderId: \"493688103076\",\n    appId: \"1:493688103076:web:76a110506fbacd5f2d4631\",\n    measurementId: \"G-28GR96Q19L\",\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\n\nconst db = firebaseApp.firestore();\n\nexport default db;\n","import React, { useEffect, useState } from \"react\";\nimport \"./Tweetbox.css\";\nimport { Avatar, Button } from \"@material-ui/core\";\nimport db from \"./firebase\";\n\nfunction Tweetbox() {\n    const [TweetMessage, setTweetMessage] = useState();\n    const [TweetImage, setTweetImage] = useState();\n    const sendTweet = (e) => {\n        e.preventDefault();\n\n        db.collection(\"posts\").add({\n            displayName: \"My Name\",\n            username: \"myname\",\n            verified: true,\n            text: TweetMessage || null,\n            image: TweetImage || null,\n            avatar: \"https://loremflickr.com/320/240\",\n        });\n        setTweetMessage(\"\");\n        setTweetImage(\"\");\n    };\n\n    return (\n        <div className=\"tweetbox\">\n            <form action=\"\">\n                <div className=\"tweetbox__input\">\n                    <Avatar src=\"https://loremflickr.com/320/240\" />\n                    <input\n                        onChange={(e) => setTweetMessage(e.target.value)}\n                        value={TweetMessage}\n                        placeholder=\"Nulla ab nisi vero tempora ?\"\n                    />\n                </div>\n                <input\n                    value={TweetImage}\n                    onChange={(e) => setTweetImage(e.target.value)}\n                    className=\"tweetbox_imgInput\"\n                    placeholder=\"Nulla ab nisi vero tempora obcaecati dolore?\"\n                />\n                <Button onClick={sendTweet} type=\"submit\">\n                    Tweet\n                </Button>\n            </form>\n        </div>\n    );\n}\n\nexport default Tweetbox;\n","import React from \"react\";\nimport \"./Post.css\";\nimport { Avatar } from \"@material-ui/core\";\nimport ChatBubbleOutlineOutlinedIcon from \"@material-ui/icons/ChatBubbleOutlineOutlined\";\nimport RepeatOutlinedIcon from \"@material-ui/icons/RepeatOutlined\";\nimport FavoriteBorderOutlinedIcon from \"@material-ui/icons/FavoriteBorderOutlined\";\nimport PublishOutlinedIcon from \"@material-ui/icons/PublishOutlined\";\nimport VerifiedUserIcon from \"@material-ui/icons/VerifiedUser\";\n\nfunction Post({ displayName, username, verified, text, image, avatar }) {\n    return (\n        <div className=\"post\">\n            <div className=\"post__avatar\">\n                <Avatar src={avatar} />\n            </div>\n            <div className=\"post__body\">\n                <div className=\"post__header\">\n                    <div className=\"post__headerText\">\n                        <h4>\n                            {displayName}{\" \"}\n                            <span className=\"post__headerSmall\">\n                                {verified && (\n                                    <VerifiedUserIcon className=\"post__badge\" />\n                                )}{\" \"}\n                                @{username}\n                            </span>\n                        </h4>\n                    </div>\n                    <div className=\"post__headerDes\">{text}</div>\n                </div>\n                <img src={image} alt=\"\" srcset=\"\" />\n                <div className=\"post__footer\">\n                    <ChatBubbleOutlineOutlinedIcon />\n                    <RepeatOutlinedIcon />\n                    <FavoriteBorderOutlinedIcon />\n                    <PublishOutlinedIcon />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Post;\n","import React, { useState, useEffect } from \"react\";\nimport \"./Feed.css\";\nimport Tweetbox from \"./Tweetbox\";\nimport Post from \"./Post\";\nimport db from \"./firebase\";\n\nfunction Feed() {\n    const [Posts, setPosts] = useState([]);\n\n    useEffect(() => {\n        db.collection(\"posts\").onSnapshot((snapshot) => {\n            setPosts(snapshot.docs.map((doc) => doc.data()));\n        });\n        return () => {};\n    }, []);\n    return (\n        <div className=\"feed\">\n            {/* Header */}\n            <div className=\"feed__header\">\n                <h2>Home</h2>\n            </div>\n\n            {/* Tweetbox */}\n            <Tweetbox />\n\n            {Posts.map((post) => (\n                <Post\n                    displayName={post.displayName}\n                    username={post.username}\n                    verified={post.verified}\n                    text={post.text}\n                    image={post.image}\n                    avatar={post.avatar}\n                />\n            ))}\n\n            {/* Post */}\n            {/* Post */}\n            {/* Post */}\n            {/* Post */}\n            {/* Post */}\n            {/* Post */}\n        </div>\n    );\n}\n\nexport default Feed;\n","import React from \"react\";\nimport \"./Widgets.css\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport {\n    TwitterTimelineEmbed,\n    TwitterShareButton,\n    TwitterFollowButton,\n    // TwitterHashtagButton,\n    // TwitterMentionButton,\n    TwitterTweetEmbed,\n} from \"react-twitter-embed\";\n\nfunction Widgets() {\n    return (\n        <div className=\"widgets\">\n            <div className=\"widgets__input\">\n                <SearchIcon className=\"widgets__searchIcon\" />\n                <input\n                    placeholder=\"Search Twitter\"\n                    type=\"text\"\n                    className=\"widgets__search\"\n                />\n            </div>\n            <div className=\"widgets__container\">\n                <h2>What's happening</h2>\n                <TwitterTweetEmbed tweetId={\"933354946111705097\"} />\n                <TwitterTimelineEmbed\n                    sourceType=\"profile\"\n                    screenName=\"kietteik\"\n                    options={{ height: 400 }}\n                />\n                <div className=\"widgets__moreButton\">\n                    <TwitterShareButton\n                        url={\"https://facebook.com/kietteik\"}\n                        options={{\n                            text: \"#reactjs is awesome\",\n                            via: \"kietteik\",\n                        }}\n                    />\n                    <TwitterFollowButton screenName={\"kietteik\"} />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Widgets;\n","import React from \"react\";\nimport \"./App.css\";\nimport \"./index.css\";\nimport Sidebar from \"./Sidebar\";\nimport Feed from \"./Feed\";\nimport Widgets from \"./Widgets\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            {/* Sidebar */}\n            <Sidebar />\n\n            {/* Feed */}\n            <Feed />\n\n            {/* Widgets */}\n            <Widgets />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}